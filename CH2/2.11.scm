(define (par-add r1 r2) 
   (/ 1 (+ (/ 1 r1) (/ 1 r2))))
;have to redefine this to handle intervals...

(define (bounds r p)
  (if (> 1.0 p)
       (display "BAD PERCENTAGE IN p")
       (make-interval (- r (* r p)) (+ r (* r p)))))  

(define (add-interval a b) 
  (make-interval (+ (lower-bound a) (lower-bound b))
                 (+ (upper-bound a) (upper-bound b))))

(define (sub-interval a b) 
  (make-interval (- (lower-bound a) (lower-bound b))
                 (- (upper-bound a) (upper-bound b))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
   (make-interval (min p1 p2 p3 p4)
                  (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (= (width y) 0)
      (error "ERROR in DIV! width (y) = 0!" y)
      (mul-interval x 
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define (width x)
  (/ (abs (- (upper-bound x) (lower-bound x))) 2.0))

(define (make-interval a b)
  (cons a b))

(define (lower-bound a)
  (car a))

(define (upper-bound a)
  (cdr a))

;NOTE: make-interval doesn't ensure that the bounds are really upper and lower...
(define (new-mul-interval x y)
  (let ((lbx (lower-bound x))
        (ubx (upper-bound x))
        (lby (lower-bound y))
        (uby (upper-bound y)))
   (cond ((and (> 0 lbx) (> 0 ubx))
            (cond ((and (> 0 lby) (> 0 uby))
                    (make-interval (* ubx uby)
                                   (* lbx lby)))
                  ((and (> 0 lby) (< 0 uby)) 
                    (make-interval (* ubx lby)
                                   (* lbx uby)))
                  ((and (< 0 lby) (< 0 uby)) 
                    (make-interval (* lbx uby)
                                   (* ubx lby)))))
         ((and (> 0 lbx) (< 0 ubx))
            (cond ((and (> 0 lby) (> 0 uby))
                    (make-interval (* lbx uby)
                                   (* ubx lby)))
                  ((and (> 0 lby) (< 0 uby)) 
                    (make-interval (min (* lbx uby) (* ubx lby))
                                   (max (* ubx uby) (* lbx lby))))
                  ((and (< 0 lby) (< 0 uby)) 
                    (make-interval (* lbx uby)
                                   (* ubx uby)))))
         ((and (< 0 lbx) (< 0 ubx))
            (cond ((and (> 0 lby) (> 0 uby))
                    (make-interval (* ubx lby)
                                   (* lbx uby)))
                  ((and (> 0 lby) (< 0 uby)) 
                    (make-interval (* ubx lby)
                                   (* ubx uby)))
                  ((and (< 0 lby) (< 0 uby)) 
                    (make-interval (* lbx lby)
                                   (* ubx uby))))))))

(define (testcond x y)
  (cond ((> x y) (display x))
        ((< x y) (display y))))
